load("//:plugin.bzl", "proto_plugin")

proto_plugin(
    name = "dart",
    outputs = [
        "{basename}.pb.dart",
        "{basename}.pbjson.dart",
        "{basename}.pbenum.dart",
    ],
    tool = ":protoc-gen-dart",
    visibility = ["//visibility:public"],
)

proto_plugin(
    name = "grpc_dart",
    options = [
        "grpc",
    ],
    outputs = [
        "{basename}.pb.dart",
        "{basename}.pbjson.dart",
        "{basename}.pbenum.dart",
        "{basename}.pbgrpc.dart",

        # Unclear how the pbserver.dart file is used.  This commit is left here
        # to remind someone that it exists.  If the 'grpc' option is provided,
        # the 'pbgrpc' file is produced.  If the file has services and the
        # 'grpc' option is not provided, the 'pbserver' file is produced
        # instead.
        #
        #  "{basename}.pbserver.dart",
    ],
    tool = ":protoc-gen-dart",
    visibility = ["//visibility:public"],
)

load("@io_bazel_rules_dart//dart/build_rules:vm.bzl", "dart_vm_binary", "dart_vm_snapshot")

dart_vm_snapshot(
    name = "protoc_plugin",
    srcs = ["dart_protoc_plugin.dart"],
    script_file = "dart_protoc_plugin.dart",
    deps = [
        "@vendor_front_end//:front_end",
        "@vendor_glob//:glob",
        "@vendor_html//:html",
        "@vendor_logging//:logging",
        "@vendor_plugin//:plugin",
        "@vendor_protoc_plugin//:protoc_plugin",
        "@vendor_pub_semver//:pub_semver",
        "@vendor_typed_data//:typed_data",
        "@vendor_watcher//:watcher",
    ],
)

load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_embed_data", "go_library")

go_embed_data(
    name = "assets",
    srcs = [
        ":protoc_plugin",
        "@dart_sdk//:bin/dart",
    ],
    flatten = True,
    package = "main",
    var = "assets",
)

#
# To avoid the vagaries of using a *script* for a protoc plugin (in various
# bazel contexts), we bundle up the actual dependencies into its own standalone
# binary that can accept stdin and write stdout reliably.  The dart binary
# itself and the application snapshot are embedded into the binary.  When it
# runs, it writes those two files out to a tmp dir and executes the snapshot,
# then removes the directory.  While in theory this sounds inefficient, in
# practice it works and is a rare event anyway, so we don't care.
#
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "go_default_library",
    srcs = [
        "protoc-gen-dart.go",
        ":assets",
    ],
    importpath = "github.com/stackb/rules_proto/dart/protoc-gen-dart",
    visibility = ["//visibility:public"],
)

go_binary(
    name = "protoc-gen-dart",
    embed = [":go_default_library"],
    visibility = ["//visibility:public"],
)
